# Variables and secrets used in this workflow:
# - VPS_SSH_KEY: SSH key for accessing the VPS (secret)
# - VPS_HOST: Hostname or IP address of the VPS (variable)
# - VPS_USER: Username for SSH access to the VPS (variable)
# - VPS_REPO_DIR: Directory of the repository on the VPS (variable)

name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Save commit hash
      if: success()
      run: echo ${{ github.sha }} > commit_hash.txt

    - name: Upload commit hash
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: commit-hash
        path: commit_hash.txt

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    steps:
    - uses: actions/checkout@v3

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: ssh-keyscan -H ${{ vars.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Copy files to VPS
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          rsync -avz --delete . ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }}:${{ vars.VPS_REPO_DIR }}_production/
        else
          rsync -avz --delete . ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }}:${{ vars.VPS_REPO_DIR }}_staging/
        fi

    - name: Deploy to VPS
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ssh ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }} '
            cd ${{ vars.VPS_REPO_DIR }}_production
            docker compose -f docker-compose.yml -f docker-compose.production.yml down
            docker compose -f docker-compose.yml -f docker-compose.production.yml build --no-cache
            docker compose -f docker-compose.yml -f docker-compose.production.yml up -d
          '
        else
          ssh ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }} '
            cd ${{ vars.VPS_REPO_DIR }}_staging
            docker compose -f docker-compose.yml -f docker-compose.staging.yml down
            docker compose -f docker-compose.yml -f docker-compose.staging.yml build --no-cache
            docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          '
        fi

  rollback:
    needs: [build-and-test, deploy]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - uses: actions/checkout@v3

    - name: Download commit hash
      uses: actions/download-artifact@v3
      with:
        name: commit-hash

    - name: Get last working commit
      run: echo "LAST_WORKING_COMMIT=$(cat commit_hash.txt)" >> $GITHUB_ENV

    - name: Checkout last working commit
      uses: actions/checkout@v3
      with:
        ref: ${{ env.LAST_WORKING_COMMIT }}

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ vars.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Copy rollback files to VPS
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          rsync -avz --delete . ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }}:${{ vars.VPS_REPO_DIR }}_production_rollback/
        else
          rsync -avz --delete . ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }}:${{ vars.VPS_REPO_DIR }}_staging_rollback/
        fi

    - name: Deploy rollback to VPS
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ssh ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }} '
            cd ${{ vars.VPS_REPO_DIR }}_production_rollback
            docker compose -f docker-compose.yml -f docker-compose.production.yml down
            docker compose -f docker-compose.yml -f docker-compose.production.yml build
            docker compose -f docker-compose.yml -f docker-compose.production.yml up -d
          '
        else
          ssh ${{ vars.VPS_USER }}@${{ vars.VPS_HOST }} '
            cd ${{ vars.VPS_REPO_DIR }}_staging_rollback
            docker compose -f docker-compose.yml -f docker-compose.staging.yml down
            docker compose -f docker-compose.yml -f docker-compose.staging.yml build
            docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d
          '
        fi

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Rollback deployed due to failure in ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} deployment
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: always()