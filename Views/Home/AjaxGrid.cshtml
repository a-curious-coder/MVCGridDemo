
@using NonFactors.Mvc.Grid
@{
    ViewData["Title"] = "Ajax Grid";
}

<h1 class="text-3xl font-bold mb-6">@ViewData["Title"]</h1>

<div class="bg-gradient-to-r from-blue-500 to-purple-600 shadow-lg rounded-lg p-4 mb-6 transition-all duration-300 ease-in-out">
    <div class="flex justify-between items-center cursor-pointer" onclick="toggleDescription()">
        <h2 class="text-xl font-bold text-white">Description</h2>
        <svg id="chevron" class="w-5 h-5 transform transition-transform duration-300 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
    </div>
    <div id="description-content" class="mt-3 overflow-hidden transition-all duration-300 ease-in-out" style="max-height: 0;">
        <p class="text-white font-medium mb-2">
            This grid loads data asynchronously using Ajax:
        </p>
        <ul class="space-y-1 text-white text-sm">
            <li class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>No full page refresh</span>
            </li>
            <li class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Improved performance</span>
            </li>
            <li class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Real-time updates</span>
            </li>
            <li class="flex items-center">
                <svg class="w-4 h-4 mr-2 text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Loading indicator</span>
            </li>
        </ul>
    </div>
</div>

<div id="grid-container">
    <div id="loading-indicator" class="text-center py-4">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100"></div>
        <p class="mt-2">Loading data... This may take up to 30 seconds.</p>
    </div>
    @(Html.AjaxGrid(Url.Action("GetAjaxGridData") ?? ""))
</div>

@section Scripts {
    <script src="~/js/mvc-grid/mvc-grid.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var gridContainer = document.querySelector(".mvc-grid");
            var loadingIndicator = document.getElementById("loading-indicator");

            function showLoadingIndicator() {
                loadingIndicator.style.display = "block";
                gridContainer.style.opacity = "0.5";
            }

            function hideLoadingIndicator() {
                loadingIndicator.style.display = "none";
                gridContainer.style.opacity = "1";
            }

            // Initialize the grid after a short delay
            setTimeout(function() {
                var grid = new MvcGrid(gridContainer);

                grid.reload = function () {
                    showLoadingIndicator();
                    return MvcGrid.prototype.reload.apply(this, arguments)
                        .then(hideLoadingIndicator)
                        .catch(function (error) {
                            console.error("Error reloading grid:", error);
                            hideLoadingIndicator();
                        });
                };

                // Set up event listeners for grid operations
                grid.element.addEventListener('reloadstart', showLoadingIndicator);
                grid.element.addEventListener('reloadend', hideLoadingIndicator);

                // Trigger initial load
                grid.reload();
            }, 100);

            // Hide loading indicator if grid fails to initialize
            setTimeout(hideLoadingIndicator, 5000);
        });

        function toggleDescription() {
            const content = document.getElementById('description-content');
            const chevron = document.getElementById('chevron');
            if (content.style.maxHeight === '0px' || content.style.maxHeight === '') {
                content.style.maxHeight = content.scrollHeight + 'px';
                chevron.classList.add('rotate-180');
            } else {
                content.style.maxHeight = '0px';
                chevron.classList.remove('rotate-180');
            }
        }
    </script>
}