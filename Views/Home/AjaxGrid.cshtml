@using NonFactors.Mvc.Grid
@{
    ViewData["Title"] = "Ajax Grid";
}

<h1 class="text-3xl font-bold mb-6">@ViewData["Title"]</h1>

<div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6 mb-8">
    <h2 class="text-xl font-semibold mb-2">Description</h2>
    <p class="text-gray-600 dark:text-gray-300">
        This grid demonstrates loading data asynchronously using Ajax:
    </p>
    <ul class="list-disc list-inside mt-2 text-gray-600 dark:text-gray-300">
        <li>Data is loaded without a full page refresh</li>
        <li>Improves performance for large datasets</li>
        <li>Allows for real-time updates</li>
        <li>Shows a loading indicator while data is being fetched</li>
    </ul>
</div>

<div id="grid-container">
    <div id="loading-indicator" class="text-center py-4">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100"></div>
        <p class="mt-2">Loading data... This may take up to 30 seconds.</p>
    </div>
    @(Html.AjaxGrid(Url.Action("GetAjaxGridData") ?? ""))
</div>

@section Scripts {
    <script src="~/js/mvc-grid/mvc-grid.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var gridContainer = document.querySelector(".mvc-grid");
            var loadingIndicator = document.getElementById("loading-indicator");

            function showLoadingIndicator() {
                loadingIndicator.style.display = "block";
                gridContainer.style.opacity = "0.5";
            }

            function hideLoadingIndicator() {
                loadingIndicator.style.display = "none";
                gridContainer.style.opacity = "1";
            }

            // Initialize the grid after a short delay
            setTimeout(function() {
                var grid = new MvcGrid(gridContainer);

                grid.reload = function () {
                    showLoadingIndicator();
                    return MvcGrid.prototype.reload.apply(this, arguments)
                        .then(hideLoadingIndicator)
                        .catch(function (error) {
                            console.error("Error reloading grid:", error);
                            hideLoadingIndicator();
                        });
                };

                // Set up event listeners for grid operations
                grid.element.addEventListener('reloadstart', showLoadingIndicator);
                grid.element.addEventListener('reloadend', hideLoadingIndicator);

                // Trigger initial load
                grid.reload();
            }, 100);

            // Hide loading indicator if grid fails to initialize
            setTimeout(hideLoadingIndicator, 5000);
        });
    </script>
}